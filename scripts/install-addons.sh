#!/bin/bash

# EKS ÌïÑÏàò Ïï†ÎìúÏò® ÏÑ§Ïπò Ïä§ÌÅ¨Î¶ΩÌä∏

set -e

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Ìï®Ïàò Ï†ïÏùò
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏
check_environment() {
    log_info "ÌôòÍ≤Ω Î≥ÄÏàòÎ•º ÌôïÏù∏Ìï©ÎãàÎã§..."
    
    if [ -z "$CLUSTER_NAME" ]; then
        log_error "CLUSTER_NAME ÌôòÍ≤Ω Î≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
        exit 1
    fi
    
    if [ -z "$AWS_REGION" ]; then
        log_error "AWS_REGION ÌôòÍ≤Ω Î≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
        exit 1
    fi
    
    log_info "ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏ ÏôÑÎ£å: CLUSTER_NAME=$CLUSTER_NAME, AWS_REGION=$AWS_REGION"
}

# kubectl Ïó∞Í≤∞ ÌôïÏù∏
check_kubectl() {
    log_info "kubectl Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï©ÎãàÎã§..."
    
    if ! kubectl cluster-info &> /dev/null; then
        log_error "kubectlÏù¥ ÌÅ¥Îü¨Ïä§ÌÑ∞Ïóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§."
        log_info "Îã§Ïùå Î™ÖÎ†πÏñ¥Î°ú kubeconfigÎ•º ÏÑ§Ï†ïÌïòÏÑ∏Ïöî:"
        log_info "aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME"
        exit 1
    fi
    
    log_info "kubectl Ïó∞Í≤∞ ÌôïÏù∏ ÏôÑÎ£å"
}

# Helm ÏÑ§Ïπò ÌôïÏù∏
check_helm() {
    log_info "Helm ÏÑ§ÏπòÎ•º ÌôïÏù∏Ìï©ÎãàÎã§..."
    
    if ! command -v helm &> /dev/null; then
        log_error "HelmÏù¥ ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
        log_info "Helm ÏÑ§Ïπò: https://helm.sh/docs/intro/install/"
        exit 1
    fi
    
    log_info "Helm Î≤ÑÏ†Ñ: $(helm version --short)"
}

# AWS Load Balancer Controller ÏÑ§Ïπò
install_aws_load_balancer_controller() {
    log_step "AWS Load Balancer ControllerÎ•º ÏÑ§ÏπòÌï©ÎãàÎã§..."
    
    # Helm Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Ï∂îÍ∞Ä
    helm repo add eks https://aws.github.io/eks-charts
    helm repo update
    
    # CRD ÏÑ§Ïπò
    kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
    
    # ServiceAccount ÏÉùÏÑ± (IRSA ÏÑ§Ï†ï)
    if ! kubectl get serviceaccount aws-load-balancer-controller -n kube-system &> /dev/null; then
        kubectl create serviceaccount aws-load-balancer-controller -n kube-system
        kubectl annotate serviceaccount aws-load-balancer-controller -n kube-system \
            eks.amazonaws.com/role-arn=$AWS_LOAD_BALANCER_CONTROLLER_ROLE_ARN
    fi
    
    # HelmÏúºÎ°ú ÏÑ§Ïπò
    helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
        -n kube-system \
        --set clusterName=$CLUSTER_NAME \
        --set serviceAccount.create=false \
        --set serviceAccount.name=aws-load-balancer-controller \
        --set region=$AWS_REGION \
        --set vpcId=$VPC_ID \
        --set image.repository=602401143452.dkr.ecr.$AWS_REGION.amazonaws.com/amazon/aws-load-balancer-controller
    
    log_info "AWS Load Balancer Controller ÏÑ§Ïπò ÏôÑÎ£å"
}

# EBS CSI Driver ÏÑ§Ïπò
install_ebs_csi_driver() {
    log_step "EBS CSI DriverÎ•º ÏÑ§ÏπòÌï©ÎãàÎã§..."
    
    # EKS Ïï†ÎìúÏò®ÏúºÎ°ú ÏÑ§Ïπò
    aws eks create-addon \
        --cluster-name $CLUSTER_NAME \
        --addon-name aws-ebs-csi-driver \
        --service-account-role-arn $EBS_CSI_DRIVER_ROLE_ARN \
        --resolve-conflicts OVERWRITE \
        --region $AWS_REGION || log_warn "EBS CSI Driver Ïï†ÎìúÏò®Ïù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÍ±∞ÎÇò ÏÑ§Ïπò Ï§ëÏûÖÎãàÎã§."
    
    # StorageClass Ï†ÅÏö©
    kubectl apply -f k8s/addons/ebs-csi-driver.yaml
    
    log_info "EBS CSI Driver ÏÑ§Ïπò ÏôÑÎ£å"
}

# EFS CSI Driver ÏÑ§Ïπò
install_efs_csi_driver() {
    log_step "EFS CSI DriverÎ•º ÏÑ§ÏπòÌï©ÎãàÎã§..."
    
    # Helm Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Ï∂îÍ∞Ä
    helm repo add aws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver/
    helm repo update
    
    # ServiceAccount ÏÉùÏÑ± (IRSA ÏÑ§Ï†ï)
    if ! kubectl get serviceaccount efs-csi-controller-sa -n kube-system &> /dev/null; then
        kubectl create serviceaccount efs-csi-controller-sa -n kube-system
        kubectl annotate serviceaccount efs-csi-controller-sa -n kube-system \
            eks.amazonaws.com/role-arn=$EFS_CSI_DRIVER_ROLE_ARN
    fi
    
    # HelmÏúºÎ°ú ÏÑ§Ïπò
    helm upgrade --install aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver \
        -n kube-system \
        --set controller.serviceAccount.create=false \
        --set controller.serviceAccount.name=efs-csi-controller-sa
    
    # StorageClass Î∞è PV Ï†ÅÏö©
    envsubst < k8s/addons/efs-csi-driver.yaml | kubectl apply -f -
    
    log_info "EFS CSI Driver ÏÑ§Ïπò ÏôÑÎ£å"
}

# Metrics Server ÏÑ§Ïπò
install_metrics_server() {
    log_step "Metrics ServerÎ•º ÏÑ§ÏπòÌï©ÎãàÎã§..."
    
    kubectl apply -f k8s/addons/metrics-server.yaml
    
    # Metrics ServerÍ∞Ä Ï§ÄÎπÑÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
    kubectl wait --for=condition=available --timeout=300s deployment/metrics-server -n kube-system
    
    log_info "Metrics Server ÏÑ§Ïπò ÏôÑÎ£å"
}

# Cluster Autoscaler ÏÑ§Ïπò
install_cluster_autoscaler() {
    log_step "Cluster AutoscalerÎ•º ÏÑ§ÏπòÌï©ÎãàÎã§..."
    
    # ServiceAccount ÏÉùÏÑ± (IRSA ÏÑ§Ï†ï)
    if ! kubectl get serviceaccount cluster-autoscaler -n kube-system &> /dev/null; then
        kubectl create serviceaccount cluster-autoscaler -n kube-system
        kubectl annotate serviceaccount cluster-autoscaler -n kube-system \
            eks.amazonaws.com/role-arn=$CLUSTER_AUTOSCALER_ROLE_ARN
    fi
    
    # Cluster Autoscaler Î∞∞Ìè¨
    envsubst < k8s/addons/cluster-autoscaler.yaml | kubectl apply -f -
    
    log_info "Cluster Autoscaler ÏÑ§Ïπò ÏôÑÎ£å"
}

# ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏÉùÏÑ±
create_namespaces() {
    log_step "ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§..."
    
    kubectl apply -f k8s/namespaces/namespaces.yaml
    
    log_info "ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏÉùÏÑ± ÏôÑÎ£å"
}

# ÏÑ§Ïπò ÏÉÅÌÉú ÌôïÏù∏
check_installation() {
    log_step "ÏÑ§Ïπò ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï©ÎãàÎã§..."
    
    echo ""
    log_info "=== Pod ÏÉÅÌÉú ÌôïÏù∏ ==="
    kubectl get pods -n kube-system | grep -E "(aws-load-balancer-controller|ebs-csi|efs-csi|metrics-server|cluster-autoscaler)"
    
    echo ""
    log_info "=== StorageClass ÌôïÏù∏ ==="
    kubectl get storageclass
    
    echo ""
    log_info "=== ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÌôïÏù∏ ==="
    kubectl get namespaces | grep -E "(frontend|backend|monitoring|security|chaos|gitops)"
    
    echo ""
    log_info "=== Metrics Server ÎèôÏûë ÌôïÏù∏ ==="
    kubectl top nodes || log_warn "Metrics ServerÍ∞Ä ÏïÑÏßÅ Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî."
}

# Î©îÏù∏ Ïã§Ìñâ
main() {
    log_info "üöÄ EKS ÌïÑÏàò Ïï†ÎìúÏò® ÏÑ§ÏπòÎ•º ÏãúÏûëÌï©ÎãàÎã§..."
    
    check_environment
    check_kubectl
    check_helm
    
    create_namespaces
    install_metrics_server
    install_aws_load_balancer_controller
    install_ebs_csi_driver
    install_efs_csi_driver
    install_cluster_autoscaler
    
    check_installation
    
    log_info "‚úÖ Î™®Îì† Ïï†ÎìúÏò® ÏÑ§ÏπòÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!"
    log_info ""
    log_info "Îã§Ïùå Îã®Í≥Ñ:"
    log_info "1. Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î∞∞Ìè¨"
    log_info "2. Î™®ÎãàÌÑ∞ÎßÅ Ïä§ÌÉù ÏÑ§Ïπò"
    log_info "3. Î≥¥Ïïà ÎèÑÍµ¨ ÏÑ§Ïπò"
}

main "$@"