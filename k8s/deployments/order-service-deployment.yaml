# Order Service Deployment
# Java Spring Boot 기반 주문 서비스를 위한 Kubernetes Deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: backend
  labels:
    app.kubernetes.io/name: order-service
    app.kubernetes.io/part-of: eks-msa-learning
    app.kubernetes.io/component: order
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: order-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: order-service
        app.kubernetes.io/part-of: eks-msa-learning
        app.kubernetes.io/component: order
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: order-service-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      - name: db-migration-check
        image: ${ECR_REGISTRY}/eks-msa-learning/order-service:latest
        command: ['sh', '-c']
        args:
        - |
          echo "Checking database connectivity..."
          java -cp /app/lib/*:/app/classes org.springframework.boot.loader.JarLauncher \
            --spring.jpa.hibernate.ddl-auto=validate \
            --spring.datasource.hikari.maximum-pool-size=1 \
            --logging.level.org.springframework.boot=INFO \
            --spring.main.web-application-type=none \
            --spring.main.allow-bean-definition-overriding=true
        env:
        # 데이터베이스 연결 정보 (Secret에서 가져옴)
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: order-db-secret
              key: database-url
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: order-db-secret
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: order-db-secret
              key: password
        envFrom:
        - configMapRef:
            name: order-service-config
        - configMapRef:
            name: common-config
      containers:
      - name: order-service
        image: ${ECR_REGISTRY}/eks-msa-learning/order-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: management
          containerPort: 8081
          protocol: TCP
        env:
        - name: SERVER_PORT
          value: "8080"
        - name: MANAGEMENT_SERVER_PORT
          value: "8081"
        - name: JAVA_OPTS
          value: "-Xms256m -Xmx512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication"
        # 데이터베이스 연결 정보 (Secret에서 가져옴)
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: order-db-secret
              key: database-url
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: order-db-secret
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: order-db-secret
              key: password
        # Redis 연결 정보 (Secret에서 가져옴)
        - name: SPRING_REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: host
        - name: SPRING_REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: port
        - name: SPRING_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
              optional: true
        envFrom:
        - configMapRef:
            name: order-service-config
        - configMapRef:
            name: common-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: management
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: management
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /actuator/health
            port: management
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: app-logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - order-service
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - t3.medium
                - t3.large