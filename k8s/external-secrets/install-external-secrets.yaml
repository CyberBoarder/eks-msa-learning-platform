# External Secrets Operator Helm 설치를 위한 매니페스트
# Helm 차트를 사용하지 않고 직접 설치하는 경우의 기본 리소스

---
# External Secrets Operator CRDs
# 실제로는 Helm 차트나 kubectl apply로 설치
apiVersion: v1
kind: ConfigMap
metadata:
  name: external-secrets-install-guide
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: external-secrets-install-guide
data:
  install-commands.sh: |
    #!/bin/bash
    
    # External Secrets Operator 설치 가이드
    echo "External Secrets Operator 설치 시작..."
    
    # Helm 리포지토리 추가
    helm repo add external-secrets https://charts.external-secrets.io
    helm repo update
    
    # 네임스페이스 생성
    kubectl create namespace external-secrets-system --dry-run=client -o yaml | kubectl apply -f -
    
    # ServiceAccount 생성 (IRSA 설정 포함)
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: external-secrets-operator
      namespace: external-secrets-system
      annotations:
        eks.amazonaws.com/role-arn: ${EXTERNAL_SECRETS_ROLE_ARN}
    EOF
    
    # External Secrets Operator 설치
    helm install external-secrets external-secrets/external-secrets \
      --namespace external-secrets-system \
      --set serviceAccount.create=false \
      --set serviceAccount.name=external-secrets-operator \
      --set securityContext.fsGroup=65534 \
      --set installCRDs=true \
      --wait
    
    # 설치 확인
    kubectl get pods -n external-secrets-system
    kubectl get crd | grep external-secrets
    
    echo "External Secrets Operator 설치 완료!"
    
  verify-installation.sh: |
    #!/bin/bash
    
    # External Secrets Operator 설치 확인
    echo "External Secrets Operator 상태 확인..."
    
    # Pod 상태 확인
    echo "=== Pod 상태 ==="
    kubectl get pods -n external-secrets-system
    
    # CRD 확인
    echo "=== CRD 확인 ==="
    kubectl get crd | grep external-secrets
    
    # ServiceAccount 확인
    echo "=== ServiceAccount 확인 ==="
    kubectl get sa external-secrets-operator -n external-secrets-system -o yaml
    
    # ClusterSecretStore 테스트
    echo "=== ClusterSecretStore 테스트 ==="
    kubectl apply -f - <<EOF
    apiVersion: external-secrets.io/v1beta1
    kind: ClusterSecretStore
    metadata:
      name: test-aws-secrets-manager
    spec:
      provider:
        aws:
          service: SecretsManager
          region: ap-northeast-1
          auth:
            jwt:
              serviceAccountRef:
                name: external-secrets-operator
                namespace: external-secrets-system
    EOF
    
    # 테스트 결과 확인
    kubectl get clustersecretstore test-aws-secrets-manager
    
    # 테스트 리소스 정리
    kubectl delete clustersecretstore test-aws-secrets-manager
    
    echo "확인 완료!"

---
# AWS Secrets Manager에 저장할 시크릿 생성 스크립트
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-secrets-setup-guide
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: aws-secrets-setup-guide
data:
  create-aws-secrets.sh: |
    #!/bin/bash
    
    # AWS Secrets Manager에 시크릿 생성
    echo "AWS Secrets Manager 시크릿 생성 시작..."
    
    # RDS 자격증명 생성
    aws secretsmanager create-secret \
      --name "eks-msa-learning/rds-credentials" \
      --description "RDS PostgreSQL credentials for EKS MSA Learning Platform" \
      --secret-string '{
        "username": "dbadmin",
        "password": "changeme123!",
        "host": "'${RDS_ENDPOINT}'",
        "port": "5432",
        "database": "msalearning"
      }' \
      --region ap-northeast-1
    
    # Redis 자격증명 생성
    aws secretsmanager create-secret \
      --name "eks-msa-learning/redis-credentials" \
      --description "Redis credentials for EKS MSA Learning Platform" \
      --secret-string '{
        "host": "'${REDIS_ENDPOINT}'",
        "port": "6379",
        "password": ""
      }' \
      --region ap-northeast-1
    
    # S3 설정 생성
    aws secretsmanager create-secret \
      --name "eks-msa-learning/s3-config" \
      --description "S3 configuration for EKS MSA Learning Platform" \
      --secret-string '{
        "bucket_name": "'${S3_BUCKET_NAME}'",
        "region": "ap-northeast-1"
      }' \
      --region ap-northeast-1
    
    # 모니터링 설정 생성
    aws secretsmanager create-secret \
      --name "eks-msa-learning/monitoring-config" \
      --description "Monitoring configuration for EKS MSA Learning Platform" \
      --secret-string '{
        "slack_webhook_url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
        "slack_channel": "#eks-msa-alerts",
        "grafana_admin_password": "admin123!"
      }' \
      --region ap-northeast-1
    
    echo "AWS Secrets Manager 시크릿 생성 완료!"
    
  update-secrets.sh: |
    #!/bin/bash
    
    # AWS Secrets Manager 시크릿 업데이트
    echo "AWS Secrets Manager 시크릿 업데이트..."
    
    # RDS 엔드포인트 업데이트 (Terraform 출력값 사용)
    if [ ! -z "$RDS_ENDPOINT" ]; then
      aws secretsmanager update-secret \
        --secret-id "eks-msa-learning/rds-credentials" \
        --secret-string '{
          "username": "dbadmin",
          "password": "changeme123!",
          "host": "'${RDS_ENDPOINT}'",
          "port": "5432",
          "database": "msalearning"
        }' \
        --region ap-northeast-1
      echo "RDS 자격증명 업데이트 완료"
    fi
    
    # Redis 엔드포인트 업데이트
    if [ ! -z "$REDIS_ENDPOINT" ]; then
      aws secretsmanager update-secret \
        --secret-id "eks-msa-learning/redis-credentials" \
        --secret-string '{
          "host": "'${REDIS_ENDPOINT}'",
          "port": "6379",
          "password": ""
        }' \
        --region ap-northeast-1
      echo "Redis 자격증명 업데이트 완료"
    fi
    
    # S3 버킷명 업데이트
    if [ ! -z "$S3_BUCKET_NAME" ]; then
      aws secretsmanager update-secret \
        --secret-id "eks-msa-learning/s3-config" \
        --secret-string '{
          "bucket_name": "'${S3_BUCKET_NAME}'",
          "region": "ap-northeast-1"
        }' \
        --region ap-northeast-1
      echo "S3 설정 업데이트 완료"
    fi
    
    echo "시크릿 업데이트 완료!"

---
# IRSA 역할 생성을 위한 Terraform 참조 가이드
apiVersion: v1
kind: ConfigMap
metadata:
  name: irsa-setup-guide
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: irsa-setup-guide
data:
  irsa-terraform.tf: |
    # External Secrets Operator를 위한 IRSA 역할
    # terraform/modules/eks/irsa.tf에 추가할 내용
    
    # External Secrets Operator IAM 역할
    resource "aws_iam_role" "external_secrets_operator" {
      name = "${var.cluster_name}-external-secrets-operator"
      
      assume_role_policy = jsonencode({
        Version = "2012-10-17"
        Statement = [
          {
            Action = "sts:AssumeRoleWithWebIdentity"
            Effect = "Allow"
            Principal = {
              Federated = aws_iam_openid_connect_provider.eks.arn
            }
            Condition = {
              StringEquals = {
                "${replace(aws_iam_openid_connect_provider.eks.url, "https://", "")}:sub": "system:serviceaccount:external-secrets-system:external-secrets-operator"
                "${replace(aws_iam_openid_connect_provider.eks.url, "https://", "")}:aud": "sts.amazonaws.com"
              }
            }
          }
        ]
      })
      
      tags = var.tags
    }
    
    # Secrets Manager 접근 정책
    resource "aws_iam_role_policy" "external_secrets_operator" {
      name = "external-secrets-operator-policy"
      role = aws_iam_role.external_secrets_operator.id
      
      policy = jsonencode({
        Version = "2012-10-17"
        Statement = [
          {
            Effect = "Allow"
            Action = [
              "secretsmanager:GetSecretValue",
              "secretsmanager:DescribeSecret"
            ]
            Resource = [
              "arn:aws:secretsmanager:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:secret:eks-msa-learning/*"
            ]
          }
        ]
      })
    }
    
    # 출력값
    output "external_secrets_operator_role_arn" {
      description = "External Secrets Operator IAM role ARN"
      value       = aws_iam_role.external_secrets_operator.arn
    }