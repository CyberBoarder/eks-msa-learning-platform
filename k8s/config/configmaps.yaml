# ConfigMaps for MSA Learning Platform
# 애플리케이션 설정 및 환경 변수 관리

---
# Frontend 서비스 ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: frontend
  labels:
    app.kubernetes.io/name: frontend-config
    app.kubernetes.io/part-of: eks-msa-learning
    app.kubernetes.io/component: frontend
data:
  # React 애플리케이션 설정
  REACT_APP_API_BASE_URL: "http://main-service.backend.svc.cluster.local:3001"
  REACT_APP_ENVIRONMENT: "development"
  REACT_APP_LOG_LEVEL: "info"
  REACT_APP_ENABLE_ANALYTICS: "false"
  
  # Nginx 설정
  nginx.conf: |
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;
        
        # React Router를 위한 설정
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # API 프록시 설정
        location /api/ {
            proxy_pass http://main-service.backend.svc.cluster.local:3001/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 헬스체크 엔드포인트
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # 보안 헤더
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    }
---
# Main Service ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: main-service-config
  namespace: backend
  labels:
    app.kubernetes.io/name: main-service-config
    app.kubernetes.io/part-of: eks-msa-learning
    app.kubernetes.io/component: main-service
data:
  # 애플리케이션 설정
  NODE_ENV: "production"
  PORT: "3001"
  LOG_LEVEL: "info"
  
  # 서비스 디스커버리 설정
  CATALOG_SERVICE_URL: "http://catalog-service.backend.svc.cluster.local:8000"
  ORDER_SERVICE_URL: "http://order-service.backend.svc.cluster.local:8080"
  
  # 캐시 설정
  CACHE_TTL: "300"
  CACHE_MAX_SIZE: "1000"
  
  # 파일 업로드 설정
  MAX_FILE_SIZE: "10485760"  # 10MB
  ALLOWED_FILE_TYPES: "image/jpeg,image/png,image/gif,application/pdf"
  
  # 헬스체크 설정
  HEALTH_CHECK_TIMEOUT: "5000"
  HEALTH_CHECK_INTERVAL: "30000"
  
  # 메트릭 설정
  METRICS_ENABLED: "true"
  METRICS_PORT: "9090"
---
# Catalog Service ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: catalog-service-config
  namespace: backend
  labels:
    app.kubernetes.io/name: catalog-service-config
    app.kubernetes.io/part-of: eks-msa-learning
    app.kubernetes.io/component: catalog-service
data:
  # FastAPI 설정
  ENVIRONMENT: "production"
  DEBUG: "false"
  PORT: "8000"
  LOG_LEVEL: "info"
  
  # 데이터베이스 설정
  DB_POOL_SIZE: "20"
  DB_MAX_OVERFLOW: "30"
  DB_POOL_TIMEOUT: "30"
  DB_POOL_RECYCLE: "3600"
  
  # 캐시 설정
  REDIS_CACHE_TTL: "3600"
  REDIS_MAX_CONNECTIONS: "10"
  
  # API 설정
  API_V1_PREFIX: "/api/v1"
  CORS_ORIGINS: "*"
  
  # 페이지네이션 설정
  DEFAULT_PAGE_SIZE: "20"
  MAX_PAGE_SIZE: "100"
  
  # 메트릭 설정
  METRICS_ENABLED: "true"
  METRICS_PORT: "9090"
---
# Order Service ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: order-service-config
  namespace: backend
  labels:
    app.kubernetes.io/name: order-service-config
    app.kubernetes.io/part-of: eks-msa-learning
    app.kubernetes.io/component: order-service
data:
  # Spring Boot 설정
  SPRING_PROFILES_ACTIVE: "production"
  SERVER_PORT: "8080"
  LOGGING_LEVEL_ROOT: "INFO"
  LOGGING_LEVEL_COM_EKSMSA: "DEBUG"
  
  # 데이터베이스 설정
  SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: "20"
  SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: "5"
  SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: "30000"
  SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: "600000"
  SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: "1800000"
  
  # JPA 설정
  SPRING_JPA_HIBERNATE_DDL_AUTO: "validate"
  SPRING_JPA_SHOW_SQL: "false"
  SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "false"
  
  # Redis 설정
  SPRING_REDIS_TIMEOUT: "2000"
  SPRING_REDIS_LETTUCE_POOL_MAX_ACTIVE: "10"
  SPRING_REDIS_LETTUCE_POOL_MAX_IDLE: "10"
  SPRING_REDIS_LETTUCE_POOL_MIN_IDLE: "1"
  
  # 메시징 설정
  ORDER_NOTIFICATION_ENABLED: "true"
  ORDER_STATUS_CHANNEL: "order-status-updates"
  
  # 메트릭 설정
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,metrics,prometheus"
  MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: "when_authorized"
  MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: "true"
---
# 공통 설정 ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: common-config
  namespace: backend
  labels:
    app.kubernetes.io/name: common-config
    app.kubernetes.io/part-of: eks-msa-learning
data:
  # AWS 리전 설정
  AWS_REGION: "ap-northeast-1"
  AWS_DEFAULT_REGION: "ap-northeast-1"
  
  # 타임존 설정
  TZ: "Asia/Tokyo"
  
  # 로깅 설정
  LOG_FORMAT: "json"
  LOG_TIMESTAMP_FORMAT: "iso"
  
  # 보안 설정
  CORS_ALLOWED_ORIGINS: "*"
  CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
  CORS_ALLOWED_HEADERS: "Content-Type,Authorization,X-Requested-With"
  
  # 모니터링 설정
  PROMETHEUS_METRICS_PATH: "/metrics"
  HEALTH_CHECK_PATH: "/health"
  
  # 트레이싱 설정 (향후 확장용)
  TRACING_ENABLED: "false"
  JAEGER_AGENT_HOST: "jaeger-agent.monitoring.svc.cluster.local"
  JAEGER_AGENT_PORT: "6831"
---
# 모니터링 ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: monitoring-config
    app.kubernetes.io/part-of: eks-msa-learning
data:
  # Prometheus 설정
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "alert_rules.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
      
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
  
  # Alertmanager 설정
  alertmanager.yml: |
    global:
      smtp_smarthost: 'localhost:587'
      smtp_from: 'alertmanager@eks-msa-learning.local'
    
    route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
    
    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: 'http://localhost:5001/'
  
  # Grafana 데이터소스 설정
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true