# External Secrets Operator 설치 및 구성
# AWS Secrets Manager와 연동하여 Kubernetes Secret을 자동으로 동기화

---
# External Secrets Operator Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets-system
  labels:
    name: external-secrets-system
    app.kubernetes.io/name: external-secrets-system

---
# External Secrets Operator ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-operator
  namespace: external-secrets-system
  annotations:
    eks.amazonaws.com/role-arn: ${EXTERNAL_SECRETS_ROLE_ARN}
  labels:
    app.kubernetes.io/name: external-secrets-operator
    app.kubernetes.io/part-of: external-secrets

---
# ClusterSecretStore for AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: aws-secrets-manager
  labels:
    app.kubernetes.io/name: aws-secrets-manager
    app.kubernetes.io/part-of: external-secrets
spec:
  provider:
    aws:
      service: SecretsManager
      region: ap-northeast-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-operator
            namespace: external-secrets-system

---
# ExternalSecret for RDS Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rds-credentials
  namespace: backend
  labels:
    app.kubernetes.io/name: rds-credentials
    app.kubernetes.io/part-of: eks-msa-learning
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: postgres-credentials-from-aws
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        username: "{{ .username }}"
        password: "{{ .password }}"
        host: "{{ .host }}"
        port: "{{ .port }}"
        database: "{{ .database }}"
        # 연결 문자열 템플릿
        database_url: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}"
  data:
  - secretKey: username
    remoteRef:
      key: eks-msa-learning/rds-credentials
      property: username
  - secretKey: password
    remoteRef:
      key: eks-msa-learning/rds-credentials
      property: password
  - secretKey: host
    remoteRef:
      key: eks-msa-learning/rds-credentials
      property: host
  - secretKey: port
    remoteRef:
      key: eks-msa-learning/rds-credentials
      property: port
  - secretKey: database
    remoteRef:
      key: eks-msa-learning/rds-credentials
      property: database

---
# ExternalSecret for Redis Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: backend
  labels:
    app.kubernetes.io/name: redis-credentials
    app.kubernetes.io/part-of: eks-msa-learning
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: redis-credentials-from-aws
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        redis_host: "{{ .host }}"
        redis_port: "{{ .port }}"
        redis_url: "redis://{{ .host }}:{{ .port }}"
        redis_password: "{{ .password | default \"\" }}"
  data:
  - secretKey: host
    remoteRef:
      key: eks-msa-learning/redis-credentials
      property: host
  - secretKey: port
    remoteRef:
      key: eks-msa-learning/redis-credentials
      property: port
  - secretKey: password
    remoteRef:
      key: eks-msa-learning/redis-credentials
      property: password

---
# ExternalSecret for S3 Configuration
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: s3-config
  namespace: backend
  labels:
    app.kubernetes.io/name: s3-config
    app.kubernetes.io/part-of: eks-msa-learning
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: s3-credentials-from-aws
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        s3_bucket_name: "{{ .bucket_name }}"
        s3_region: "{{ .region }}"
        aws_access_key_id: ""  # IRSA 사용시 불필요
        aws_secret_access_key: ""  # IRSA 사용시 불필요
  data:
  - secretKey: bucket_name
    remoteRef:
      key: eks-msa-learning/s3-config
      property: bucket_name
  - secretKey: region
    remoteRef:
      key: eks-msa-learning/s3-config
      property: region

---
# Frontend 네임스페이스용 S3 ExternalSecret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: s3-config
  namespace: frontend
  labels:
    app.kubernetes.io/name: s3-config
    app.kubernetes.io/part-of: eks-msa-learning
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: s3-credentials-from-aws
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        s3_bucket_name: "{{ .bucket_name }}"
        s3_region: "{{ .region }}"
  data:
  - secretKey: bucket_name
    remoteRef:
      key: eks-msa-learning/s3-config
      property: bucket_name
  - secretKey: region
    remoteRef:
      key: eks-msa-learning/s3-config
      property: region

---
# Monitoring 네임스페이스용 ExternalSecret (Slack Webhook 등)
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: monitoring-secrets
  namespace: monitoring
  labels:
    app.kubernetes.io/name: monitoring-secrets
    app.kubernetes.io/part-of: eks-msa-learning
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: monitoring-secrets-from-aws
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        slack_webhook_url: "{{ .slack_webhook_url }}"
        slack_channel: "{{ .slack_channel }}"
        grafana_admin_password: "{{ .grafana_admin_password }}"
  data:
  - secretKey: slack_webhook_url
    remoteRef:
      key: eks-msa-learning/monitoring-config
      property: slack_webhook_url
  - secretKey: slack_channel
    remoteRef:
      key: eks-msa-learning/monitoring-config
      property: slack_channel
  - secretKey: grafana_admin_password
    remoteRef:
      key: eks-msa-learning/monitoring-config
      property: grafana_admin_password